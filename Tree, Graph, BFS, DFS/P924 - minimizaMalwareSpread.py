class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph) 
        parent = [i for i in range(n)]
        rank = [1]*n
        
        def find(node):
            while node != parent[node]:
                parent[node] = parent[parent[node]]
                node = parent[node]
            return node
        
        def union(n1, n2):
            p1, p2 = find(n1), find(n2)
            if p1 == p2:
                return
            if rank[p1] > rank[p2]:
                rank[p1] += rank[p2]
                parent[p2] = p1
            else:
                rank[p2] += rank[p1]
                parent[p1] = p2
        
        for i in range(n):
            for j in range(n):
                if graph[i][j] == 1:
                    union(i, j)
        
        ans = float('-inf')
        max_size = -1
        infected = [0]*n
        
        for i in initial:
            par = find(i)
            infected[par] += 1
            
        # using infected array, we will only consider components which will
        # have only 1 infected, because if we have >1 , even if we remove
        # one node, other infected nodes will infect the whole component
        # after that we select the maximum number of nodes we can save
        for i in initial:
            par = find(i)
            if infected[par] == 1 and rank[par] >= max_size:
                ans = min(ans, i) if max_size == rank[par] else i
                max_size = rank[par]
        
        
        return min(initial) if ans == float(-inf) else ans